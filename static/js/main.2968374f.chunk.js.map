{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search/search.components.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","console","log","App","e","setState","searchField","target","value","state","fetch","fetchURL","json","response","this","filteredMonster","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAEaA,G,kBAAM,SAACC,GAAD,OACjB,6BACE,wBAAIC,UAAU,kBACV,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAAsEL,EAAMI,QAAQE,SCFrGC,EAAU,SAACP,GAEpB,OACI,yBAAKC,UAAU,aACXD,EAAMQ,SAASC,KAAI,SAACL,GACpB,OAAQ,kBAAC,EAAD,CAAMM,IAAKN,EAAQC,GAAID,QAASA,SCNvCO,G,MAAU,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,aACrC,OACY,2BACAZ,UAAU,YACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCJtBG,QAAQC,SAAI,G,IAuCGC,E,YArCb,aAAc,IAAD,8BACX,+CAMFL,aAAa,SAACM,GACZ,EAAKC,SAAS,CAAEC,YAAcF,EAAEG,OAAOC,SANvC,EAAKC,MAAM,CACThB,SAAS,GACTa,YAAY,IAJH,E,8LAYaI,MAAM,+C,cAAtBC,E,0BACgBA,EAASC,Q,OAAzBC,E,OACNC,KAAKT,SAAS,CAACZ,SAASoB,I,kDAIxBZ,QAAQC,IAAR,M,0FAKF,IADM,EAEsBY,KAAKL,MAA3BhB,EAFA,EAEAA,SAASa,EAFT,EAESA,YACVS,EAAiBtB,EAASuB,QAC9B,SAAA3B,GAAO,OAAEA,EAAQE,KAAK0B,cAAcC,SAASZ,EAAYW,kBAG1D,OACA,yBAAK/B,UAAU,OACf,4BARe,qBASf,kBAAC,EAAD,CAAWY,aAAcgB,KAAKhB,aAAcD,YAAY,YACxD,kBAAC,EAAD,CAAUJ,SAAUsB,S,GAlCNI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2968374f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.css'\r\nexport const Card =(props)=>(\r\n  <div>\r\n    <h2 className=\"card-container\">\r\n        <img alt=\"Monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>{props.monster.name}\r\n    </h2>\r\n  </div>\r\n)","import React from 'react'\r\nimport './card-list.css'\r\nimport {Card} from '../card/card.component'\r\nexport const CardList= (props)=>\r\n    {\r\n    return(\r\n        <div className=\"card-list\">\r\n        {   props.monsters.map((monster)=>{\r\n            return (<Card key={monster.id} monster={monster}/>)\r\n        })}         \r\n        </div>)\r\n    }","import React from 'react'\r\nimport './search.styles.css'\r\nexport const SearchBox=({placeholder,handleChange})=>{\r\nreturn  (\r\n            <input\r\n            className=\"SearchBox\" \r\n            type=\"search\"\r\n            placeholder={placeholder}\r\n            onChange={handleChange}/>\r\n        )\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search/search.components';\nconsole.log(this)\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      monsters:[],\n      searchField:''\n    }\n  }\n  handleChange=(e)=>{\n    this.setState({ searchField : e.target.value })\n    }\n  async componentDidMount(){\n    try{\n      const fetchURL= await fetch('https://jsonplaceholder.typicode.com/users')\n      const response= await fetchURL.json()\n      this.setState({monsters:response})\n    }\n    catch(e)\n    {\n      console.log(e)\n    }\n  }\n\n  render(){ \n    const headings=\"Monster's Rolodex\"\n   const {monsters,searchField}=this.state\n   const filteredMonster =monsters.filter(\n     monster=>monster.name.toLowerCase().includes(searchField.toLowerCase())   \n   )\n  \n    return (  \n    <div className=\"App\">\n    <h1>{headings}</h1>\n    <SearchBox handleChange={this.handleChange} placeholder='Monster'/>\n    <CardList monsters={filteredMonster}></CardList>\n    </div>\n    )}\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}